// ********RoostGPT********
/*
Test generated by RoostGPT for test hsbc-hypermedia-api using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=addBookToCart_0ba5fc81e6
ROOST_METHOD_SIG_HASH=addBookToCart_44e3f1e13f

================================VULNERABILITIES================================
Vulnerability: CWE-501: Trust Boundary Violation
Issue: The code operates on user-provided input (@RequestBody final BookResource book), which may expose the application to malicious input or attacks such as SQL Injection or Cross Site Scripting (XSS).
Solution: Consider validating, sanitizing, or encoding the user-provided inputs, using a library like OWASP Java Encoder for encoding or OWASP Java HTML Sanitizer.

Vulnerability: CWE-276: Incorrect Default Permissions or CWE-732: Incorrect Permission Assignment for Critical Resource
Issue: If bookRepo in the given code doesn't have safe access control functionality, it might allow unauthorized entity access, potentially leading to unauthorized data access or changes.
Solution: Implement robust access control mechanisms - potentially a role-based access control (RBAC) or Attribute-based access control (ABAC) system, to ensure only authorized entities can access or modify critical resources.

Vulnerability: CWE-311: Missing Encryption of Sensitive Data
Issue: The book's ISBN are used directly and returned in the response body. If ISBN is sensitive data, displaying it directly may increase the risk of data leakage.
Solution: When dealing with sensitive data, consider using pseudonymization, anonymization, or encryption prior to its storage or use. Be cautious while sending this data in the response as well.

================================================================================
Scenario 1: Test for Valid Book ISBN

Details:  
  TestName: addBookWithValidIsbn
  Description: This test aims to check if a book with a valid ISBN is successfully added to the cart.
  Execution:
    Arrange: Mock the book repository to return a valid book when searched by ISBN. Prepare a book resource with valid ISBN.
    Act: Call the addBookToCart method with the book resource.
    Assert: Check if the returned NewCartResource contains the book.
  Validation: 
    This assertion ensures that the book is successfully added to the cart when provided with valid ISBN. This test is important to ensure that the basic functionality of adding book to cart works as expected.


Scenario 2: Test for Invalid Book ISBN

Details:  
  TestName: addBookWithInvalidIsbn
  Description: This test aims to check if the method throws an appropriate exception when a book with an invalid ISBN is tried to be added to cart.
  Execution:
    Arrange: Mock the book repository to return null when searched by ISBN. Prepare a book resource with invalid ISBN.
    Act: Call the addBookToCart method with the book resource.
    Assert: Expect an exception with a message stating, "No Book found for ISBN: (invalid ISBN)".
  Validation: 
    This assertion checks if the appropriate exception is thrown when a book with an invalid ISBN is tried to be added to cart. This ensures error handling when invalid data is input.

  
Scenario 3: Test for Empty Cart Case

Details:  
  TestName: addBookToEmptyCart
  Description: This test aims to check if a book can be successfully added to an empty cart.
  Execution:
    Arrange: Mock the book repository to return a book when searched by ISBN. Prepare a book resource with valid ISBN and an empty cart.
    Act: Call the addBookToCart method with the book resource.
    Assert: Check if the returned NewCartResource contains the book.
  Validation: 
    This assertion checks if the book can be added to an empty cart successfully. This test is to ensure that the application can handle the scenario of adding items to an initially empty cart.  
  
Scenario 4: Duplicate Book Addition

Details:  
  TestName: addDuplicateBookToCart
  Description: This test is intended to check if the method can gracefully handle the addition of duplicate books to the cart.
  Execution:
    Arrange: Mock the book repository to return a book when searched by a valid ISBN. Add the book to the cart. Prepare a book resource with the same valid ISBN.
    Act: Call the addBookToCart method with the book resource.
    Assert: Check if the returned NewCartResource still contains only one instance of the book.
  Validation: 
    This assertion verifies that duplicate addition of the same book does not affect the cart, ensuring that the cart maintains unique book entries.
*/

// ********RoostGPT********
package com.baeldung.web.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.resource.BookResource;
import com.baeldung.web.resource.NewCartResource;
import com.baeldung.web.error.EntityNotFoundException;

public class NewCartControllerAddBookToCartTest {
	
	private BookRepository bookRepo;
	private NewCartController cartController;
	private String validIsbn = "1234567890";
	private String invalidIsbn = "9876543210";
	private Book validBook;
	
	@BeforeEach
	public void setup() {
		bookRepo = mock(BookRepository.class);
		cartController = new NewCartController();
		validBook = new Book();
		validBook.setIsbn(validIsbn);
	}
	
	@Test
	@DisplayName("Add Book with Valid ISBN to Cart")
	public void addBookWithValidIsbn() {
		// Arrange
		when(bookRepo.findByIsbn(validIsbn)).thenReturn(validBook);
		BookResource bookResource = new BookResource(validBook);
		
		// Act
		NewCartResource cart = cartController.addBookToCart(bookResource);
		
		// Assert
		assertTrue(cart.getBooksInCart().contains(validBook));
	}
	
	@Test
	@DisplayName("Add Book with Invalid ISBN to Cart")
	public void addBookWithInvalidIsbn() {
		// Arrange
		when(bookRepo.findByIsbn(invalidIsbn)).thenReturn(null);
		Book invalidBook = new Book();
		invalidBook.setIsbn(invalidIsbn);
		BookResource bookResource = new BookResource(invalidBook);
		
		// Assert
		assertThrows(EntityNotFoundException.class, () -> {
			// Act
			cartController.addBookToCart(bookResource);
		});
	}
	
	@Test
	@DisplayName("Add Book to Empty Cart")
	public void addBookToEmptyCart() {
		// Arrange
		when(bookRepo.findByIsbn(validIsbn)).thenReturn(validBook);
		BookResource bookResource = new BookResource(validBook);
		
		// Act
		cartController.clearYourCart(); // ensures the cart is empty before the test
		NewCartResource cart = cartController.addBookToCart(bookResource);
		
		// Assert
		assertTrue(cart.getBooksInCart().contains(validBook));
	}
	
	@Test
	@DisplayName("Add Duplicate Book to Cart")
	public void addDuplicateBookToCart() {
		// Arrange
		when(bookRepo.findByIsbn(validIsbn)).thenReturn(validBook);
		BookResource bookResource = new BookResource(validBook);
		
		// Act
		cartController.addBookToCart(bookResource); // add the book first time
		NewCartResource cart = cartController.addBookToCart(bookResource); // add the book second time
		
		// Assert
		assertEquals(1, cart.getBooksInCart().stream().filter(book -> book.getIsbn().equals(validIsbn)).count());
	}
}

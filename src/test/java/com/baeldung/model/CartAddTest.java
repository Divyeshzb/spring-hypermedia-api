// ********RoostGPT********
/*
Test generated by RoostGPT for test hsbc-hypermedia-api using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=add_341a132894
ROOST_METHOD_SIG_HASH=add_711529701a

================================VULNERABILITIES================================
Vulnerability: Unvalidated User Input (CWE-20)
Issue: The method `add` takes a `bookToAdd` object and directly adds it to the `books` collection. If the `bookToAdd` object is user-controlled and not validated, it could lead to a variety of security issues such as exposure of sensitive information, invalid state, unexpected behaviors.
Solution: Implement input validation before adding `bookToAdd` to `books`. This could involve checking that the object adheres to the expected format and escapes or rejects potentially risky inputs.

================================================================================
Scenario 1: Add a valid book object to the list 

Details:  
  TestName: testAddValidBook.
  Description: This test case is intended to check the successful addition of a valid book object to the list.
Execution:
  Arrange: Create a valid book object.
  Act: Invoke the 'add' method with this valid book object as parameter.
  Assert: Assert that the size of the list has increased by 1 after the addition.
Validation:
  This assertion aims to verify that the 'add' method works correctly when passed a valid book object. This test is significant as it checks that the 'add' method is capable of performing its primary functionality of adding books to the list.

Scenario 2: Attempt to add a null book object

Details:
  TestName: testAddNullBook.
  Description: This test case is meant to confirm the behavior of the 'add' method when a null book object is passed.
Execution:
  Arrange: Attempt to pass a null object to the 'add' method.
  Act: Invoke the 'add' method with null as the parameter.
  Assert: Assert that an exception is thrown due to the null book object.
Validation:
  The assertion is intended to verify that the 'add' method appropriately handles this exception by rejecting the null object. This test is significant as it captures an edge case in potential uses of the 'add' method.

Scenario 3: Add an existing book object to the list 

Details:  
  TestName: testAddExistingBook.
  Description: This test case is intended to check the behavior of the 'add' method when an existing book in the list is re-added.
Execution:
  Arrange: Add a valid book object to the list. 
  Act: Invoke the 'add' method again with this existing book object as parameter.
  Assert: Assert that the size of the list has increased by 1 after the addition.
Validation:
  This assertion aims to verify that the 'add' method works correctly even when an existing book is added to the list again. This test is important as it checks the method's ability to handle duplicate entries.
*/

// ********RoostGPT********
package com.baeldung.model;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class CartAddTest {

    private Cart cart;
    private Book validBook;

    @Before
    public void setUp() {
        cart = new Cart();
        validBook = new Book("Author1", "Title1", "ISBN1");
    }

    @Test
    public void testAddValidBook() {
        int sizeBeforeAdd = cart.getBooks().size();
        cart.add(validBook);
        int sizeAfterAdd = cart.getBooks().size();
        
        assertEquals(sizeBeforeAdd + 1, sizeAfterAdd);
        assertTrue(cart.getBooks().contains(validBook));
    }

    @Test(expected = NullPointerException.class)
    public void testAddNullBook() {
        Book nullBook = null;
        cart.add(nullBook);
    }

    @Test
    public void testAddExistingBook() {
        cart.add(validBook);
        int sizeBeforeAdd = cart.getBooks().size();
        cart.add(validBook);
        int sizeAfterAdd = cart.getBooks().size();

        assertEquals(sizeBeforeAdd + 1, sizeAfterAdd);
        assertTrue(cart.getBooks().contains(validBook));
    }
}
